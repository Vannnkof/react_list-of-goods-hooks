{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortField","setSortField","reverseField","setReverseField","goods","visibleGoods","map","good","index","name","id","long","length","sort","a","b","Alphabet","localeCompare","Length","reverse","getPreparedGoods","className","onClick","type","cn","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,SAAAA,M,KAyCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAASH,EAASI,MAApD,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KAEMC,EAvCR,SACEA,EACAJ,GAEC,IADDE,EACA,wDACMG,EAAe,YAAID,GAAOE,KAAI,SAACC,EAAMC,GAAP,MAClC,CACEC,KAAMF,EACNG,GAAKF,EAAQ,EACbG,KAAMJ,EAAKK,WAuBf,OAnBIZ,GACFK,EAAaQ,MAAK,SAACC,EAAGC,GACpB,OAAQf,GACN,KAAKL,EAASqB,SACZ,OAAOF,EAAEL,KAAKQ,cAAcF,EAAEN,MAEhC,KAAKd,EAASuB,OACZ,OAAOJ,EAAEH,KAAOI,EAAEJ,KAEpB,QACE,OAAO,MAKXT,GACFG,EAAac,UAGRd,EAOOe,CACZxB,EACAI,EACAE,GAGF,OACE,sBAAKmB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMrB,EAAaN,EAASqB,WACrCO,KAAK,SACLF,UAAWG,IAAG,iBAAkB,CAC9B,WAAYxB,IAAcL,EAASqB,WAJvC,iCAUA,wBACEM,QAAS,kBAAMrB,EAAaN,EAASuB,SACrCK,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,WAAYxB,IAAcL,EAASuB,SAJvC,4BAUA,wBACEI,QAAS,kBAAMnB,GAAiBD,IAChCqB,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CACjC,YAAatB,IAJjB,sBAUEF,GAAaE,IACb,wBACEoB,QAAS,WACPnB,GAAgB,GAChBF,EAAaN,EAASI,OAExBwB,KAAK,SACLF,UAAU,4BANZ,sBAaJ,6BACGjB,EAAME,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SACGA,EAAKE,MADgBF,EAAKG,aCpHvCe,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.c307b15e.chunk.js","sourcesContent":["import cn from 'classnames';\n\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  None = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  reverseField = false,\n) {\n  const visibleGoods = [...goods].map((good, index) => (\n    {\n      name: good,\n      id: (index + 1),\n      long: good.length,\n    }\n  ));\n\n  if (sortField) {\n    visibleGoods.sort((a, b): number => {\n      switch (sortField) {\n        case SortType.Alphabet:\n          return a.name.localeCompare(b.name);\n\n        case SortType.Length:\n          return a.long - b.long;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState(SortType.None);\n  const [reverseField, setReverseField] = useState(false);\n\n  const goods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    reverseField,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.Alphabet)}\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SortType.Alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.Length)}\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SortType.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setReverseField(!reverseField)}\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !reverseField,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(sortField || reverseField) && (\n          <button\n            onClick={() => {\n              setReverseField(false);\n              setSortField(SortType.None);\n            }}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good.id}>\n            {good.name}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}