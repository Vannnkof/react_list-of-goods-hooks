{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","None","sortType","setSortType","isListReversed","setIsListReversed","filteredGoods","goods","reverseField","preparedGoods","sort","a","b","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","canWeReset","Boolean","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,gBAAAA,E,SAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAgCC,mBAASH,EAASI,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4CH,oBAAS,GAArD,mBAAOI,EAAP,KAAuBC,EAAvB,KAEMC,EAjCR,SACEC,EACAL,GAEC,IADDM,EACA,wDACMC,EAAa,YAAOF,GAqB1B,OAnBIL,GACFO,EAAcC,MAAK,SAACC,EAAGC,GACrB,OAAQV,GACN,KAAKL,EAASgB,SACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKf,EAASkB,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,QACE,OAAO,MAKXR,GACFC,EAAcQ,UAGTR,EAOeS,CACpBpB,EACAI,EACAE,GAGIe,EAAuBC,QAAQlB,IAAaE,EAOlD,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMnB,EAAYN,EAASgB,WACpCU,KAAK,SACLF,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYtB,IAAaL,EAASgB,WAJtC,iCAUA,wBACES,QAAS,kBAAMnB,EAAYN,EAASkB,SACpCQ,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,WAAYtB,IAAaL,EAASkB,SAJtC,4BAUA,wBACEO,QAAS,kBAAMjB,GAAmBD,IAClCmB,KAAK,SACLF,UAAWG,IAAG,SAAU,aAAc,CACpC,YAAapB,IAJjB,qBAUCe,GACC,wBACEG,QAxCW,WACnBjB,GAAkB,GAClBF,EAAYN,EAASI,OAuCbsB,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGf,EAAcmB,KAAI,SAAAC,GAAI,OACrB,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YClHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.dea4a69e.chunk.js","sourcesContent":["import cn from 'classnames';\n\nimport React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  Alphabet = 'alphabet',\n  Length = 'length',\n  None = '',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortType: SortType,\n  reverseField = false,\n) {\n  const preparedGoods = [...goods];\n\n  if (sortType) {\n    preparedGoods.sort((a, b): number => {\n      switch (sortType) {\n        case SortType.Alphabet:\n          return a.localeCompare(b);\n\n        case SortType.Length:\n          return a.length - b.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverseField) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState(SortType.None);\n  const [isListReversed, setIsListReversed] = useState(false);\n\n  const filteredGoods = getPreparedGoods(\n    goodsFromServer,\n    sortType,\n    isListReversed,\n  );\n\n  const canWeReset: boolean = (Boolean(sortType) || isListReversed);\n\n  const handlerClick = () => {\n    setIsListReversed(false);\n    setSortType(SortType.None);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortType(SortType.Alphabet)}\n          type=\"button\"\n          className={cn('button', 'is-info', {\n            'is-light': sortType !== SortType.Alphabet,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortType(SortType.Length)}\n          type=\"button\"\n          className={cn('button', 'is-success', {\n            'is-light': sortType !== SortType.Length,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={() => setIsListReversed(!isListReversed)}\n          type=\"button\"\n          className={cn('button', 'is-warning', {\n            'is-light': !isListReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {canWeReset && (\n          <button\n            onClick={handlerClick}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {filteredGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}